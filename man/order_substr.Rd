% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/order_substr.R
\name{order_substr}
\alias{order_substr}
\title{Order substrings of a character vector}
\usage{
order_substr(x,
  split = "\\\\s*,\\\\s*|\\\\s*/\\\\s*|\\\\s*-\\\\s*|\\\\s+",
  perl = TRUE, collapse = " ", reverse = FALSE)
}
\arguments{
\item{x}{a character vector.}

\item{split}{a regular expressin by which to split. See \link{Details}.}

\item{perl}{logical, whether to interpret \code{split} as a Perl-style regular expression.}

\item{collapse}{a character string with which to collapse the re-ordered sub-strings.}

\item{reverse}{logical, whether to reverse the ordering.}
}
\value{
A character vector with substrings ordered alphabetically and re-collapsed.
}
\description{
Split a character vector, reorder the substrings, and paste back together.
}
\details{
By default, \code{order_substr()} splits each string of a character vector at any commas,
         forward slashes, hyphens, and whitespace, regardless of whether these characters
         are surrounded by whitespace.

         Alternative regular expressions for splitting can be used via \code{split}.
         Other strings may be used to separate the alphabetized output via \code{collapse}.
}
\note{
Cleaning with \code{order_substr()} works poorly when substrings are inconsistently separated
         by the split pattern. For example, the vector of tuna species below hyphenates \code{yellow-fin}
         but leaves \code{bluefin} as a single word. Therefore, with the default split patterns,
         \code{order_substr()} splits \code{yellow-fin} prior to alphabetization.
}
\examples{
tuna <- c("tuna,skipjack", "tuna  , bluefin", "yellow-fin - tuna", "tuna,   albacore")
order_substr(tuna)

colors <- c("green/red", "yellow / blue", "orange purple")
order_substr(colors, collapse = "-", reverse = TRUE)
}
